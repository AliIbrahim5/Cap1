{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ALI\\\\OneDrive\\\\Desktop\\\\Cap1\\\\hangman\\\\src\\\\components\\\\Play\\\\index.js\",\n    _s = $RefreshSig$();\n\nimport { React, useState, useEffect } from 'react';\nimport './style.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst Play = () => {\n  _s();\n\n  let words = [\"NOSE\", \"TONGUE\", \"LEG\", \"HAND\", \"BACK\"];\n  const [word, setword] = useState(words[Math.floor(Math.random() * words.length)]);\n  const [dashes, setDashes] = useState(\"-\".repeat(word.length));\n  const [guesses, setguesses] = useState(5);\n  let letters = [\"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\", \"J\", \"K\", \"L\", \"M\", \"N\", \"O\", \"P\", \"Q\", \"R\", \"S\", \"T\", \"U\", \"V\", \"W\", \"X\", \"Y\", \"Z\"];\n  let str;\n\n  const letterPressed = index => {\n    document.getElementById(`${index}`).disabled = true;\n\n    if (word.includes(letters[index])) {\n      str = dashes.split(\"\");\n      str[word.indexOf(letters[index])] = letters[index];\n      setDashes(str.join(\"\"));\n    } else {\n      setguesses(guesses - 1);\n\n      if (guesses <= 1) {\n        alert('Lost');\n      }\n    }\n  };\n\n  const timer = () => {\n    setTimeout(() => {}, timeout);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"home\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        class: \"play\",\n        children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n          children: [\"Guesses left: \", guesses]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 34,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          class: \"letters\",\n          children: letters.map((letter, index) => {\n            return /*#__PURE__*/_jsxDEV(_Fragment, {\n              children: /*#__PURE__*/_jsxDEV(\"button\", {\n                className: \"letter\",\n                id: `${index}`,\n                onClick: () => letterPressed(index),\n                children: letter\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 39,\n                columnNumber: 21\n              }, this)\n            }, void 0, false);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 35,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"guess\",\n          children: dashes\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 31,\n    columnNumber: 7\n  }, this);\n};\n\n_s(Play, \"iWA39b40LxfJtRhb7fsAfhBPFqI=\");\n\n_c = Play;\nexport default Play;\n\nvar _c;\n\n$RefreshReg$(_c, \"Play\");","map":{"version":3,"sources":["C:/Users/ALI/OneDrive/Desktop/Cap1/hangman/src/components/Play/index.js"],"names":["React","useState","useEffect","Play","words","word","setword","Math","floor","random","length","dashes","setDashes","repeat","guesses","setguesses","letters","str","letterPressed","index","document","getElementById","disabled","includes","split","indexOf","join","alert","timer","setTimeout","timeout","map","letter"],"mappings":"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","sourcesContent":["import {React,useState, useEffect} from 'react'\r\nimport './style.css'\r\n\r\n\r\nconst Play = () => {\r\n   \r\n    let words = [\"NOSE\", \"TONGUE\", \"LEG\", \"HAND\", \"BACK\"];\r\n    const [word, setword] = useState(words[Math.floor(Math.random() * words.length)])\r\n    const [dashes, setDashes] = useState(\"-\".repeat(word.length));\r\n    const [guesses, setguesses] = useState(5)\r\n    let letters = [\"A\",\"B\",\"C\",\"D\",\"E\",\"F\",\"G\",\"H\",\"I\",\"J\",\"K\",\"L\",\"M\",\"N\",\"O\",\"P\",\"Q\",\"R\",\"S\",\"T\",\"U\",\"V\",\"W\",\"X\",\"Y\",\"Z\"];\r\n    let str;\r\n    const letterPressed = (index) => { \r\n         document.getElementById(`${index}`).disabled = true;\r\n      if (word.includes(letters[index])) {\r\n        str = dashes.split(\"\");\r\n        str[word.indexOf(letters[index])] = letters[index];\r\n        setDashes(str.join(\"\"));\r\n      }else{\r\n          setguesses(guesses-1)\r\n          if(guesses<=1){alert('Lost')}\r\n      }\r\n    };\r\n\r\n    const timer = () =>{\r\n            setTimeout(() => {\r\n                \r\n            }, timeout);\r\n    }\r\n    return (\r\n      <div className=\"container\">\r\n        <div className=\"home\">\r\n          <div class=\"play\">\r\n              <h4>Guesses left: {guesses}</h4>\r\n            <div class=\"letters\">\r\n              {letters.map((letter, index) => {\r\n                return (\r\n                  <>\r\n                    <button\r\n                      className='letter' id={`${index}`}\r\n                      onClick={() => letterPressed(index)}\r\n                    >\r\n                      {letter}\r\n                    </button>\r\n                  </>\r\n                );\r\n              })}\r\n            </div>\r\n            <p className=\"guess\">{dashes}</p>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  };\r\n  \r\n\r\nexport default Play\r\n"]},"metadata":{},"sourceType":"module"}